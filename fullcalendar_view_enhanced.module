<?php

use Drupal\fullcalendar_view_enhanced\Plugin\views\style\FullCalendarDisplay;
use Drupal\views\ViewExecutable;

\Drupal::moduleHandler()->loadInclude('fullcalendar_view_enhanced', 'inc', 'fullcalendar_view_enhanced.theme');


/**
 * Implements hook_library_info_alter().
 */
function fullcalendar_view_enhanced_library_info_alter(array &$libraries, $module) {
  if ('fullcalendar_view_enhanced' == $module) {
    // Use CDN instead of all local missing libraries.
    // JSFrame.js
    $cdn_library = _fullcalendar_view_enhanced_use_cdn_full_path($libraries, 'libraries.jsframe', 'js');
    if ($cdn_library) {
      $libraries['libraries.jsframe']['js'] = $cdn_library;
    }
    // Moment.js
    $cdn_library = _fullcalendar_view_enhanced_use_cdn_full_path($libraries, 'libraries.moment', 'js');
    if ($cdn_library) {
      $libraries['libraries.moment']['js'] = $cdn_library;
    }
    // RRule js.
    $cdn_library = _fullcalendar_view_enhanced_use_cdn_full_path($libraries, 'libraries.rrule', 'js');
    if ($cdn_library) {
      $libraries['libraries.rrule']['js'] = $cdn_library;
    }
    // Fullcalendar default theme.
    $cdn_library = _fullcalendar_view_enhanced_use_cdn($libraries, 'libraries.fullcalendar-theme', 'css');
    if ($cdn_library) {
      $libraries['libraries.fullcalendar-theme']['css']['component'] = $cdn_library;
    }
    // Fullcalendar js.
    $cdn_library = _fullcalendar_view_enhanced_use_cdn($libraries, 'libraries.fullcalendar', 'js');
    if ($cdn_library) {
      $libraries['libraries.fullcalendar']['js'] = $cdn_library;
    }
  }
}

/**
 * Replace local library with CDN.
 *
 * @param array $libraries
 *   The libraries array.
 * @param string $library_name
 *   The library name.
 * @param string $type
 *   The library type.
 * @param bool $replace_local
 *   Force to replace local libraries with CDN.
 *
 * @return array
 *   The new library array (CDN)
 */
function _fullcalendar_view_enhanced_use_cdn(array $libraries, $library_name, $type, $replace_local = FALSE) {
  if (isset($libraries[$library_name])) {
    if (isset($libraries[$library_name][$type]) && isset($libraries[$library_name]['cdn'])) {
      $library_array = [];
      $updated = FALSE;
      // CSS library has a sub-array called component.
      if ($type === 'css') {
        if (isset($libraries[$library_name][$type]['component'])) {
          $local_library = $libraries[$library_name][$type]['component'];
        }
        else {
          return FALSE;
        }
      }
      else {
        // Local js library.
        $local_library = $libraries[$library_name][$type];
      }
      foreach ($local_library as $key => $value) {
        if (!file_exists(DRUPAL_ROOT . $key) || $replace_local) {
          // The js file doesn't exist.
          // Replace it with remote cdn.
          $path = explode('/', $key);
          $end = count($path);
          $plugin_url = $path[$end - 2] . '@' . $libraries[$library_name]['version'] . '/' . $path[$end - 1];
          $library_array[$libraries[$library_name]['cdn'] . $plugin_url] = $value;
          $updated = TRUE;
        }
        else {
          $library_array[$key] = $value;
        }
      }
    }
  }
  
  return empty($updated) ? FALSE : $library_array;
}

/**
 * Replace local rrule library with CDN.
 *
 * @param array $libraries
 *   The libraries array.
 * @param string $library_name
 *   The library name.
 * @param string $type
 *   The library type.
 * @param bool $replace_local
 *   Force to replace local libraries with CDN.
 *
 * @return array
 *   The new library array (CDN)
 */
function _fullcalendar_view_enhanced_use_cdn_full_path(array $libraries, $library_name, $type, $replace_local = FALSE) {
  if (isset($libraries[$library_name])) {
    if (isset($libraries[$library_name][$type]) && isset($libraries[$library_name]['cdn'])) {
      $library_array = [];
      $updated = FALSE;
      // CSS library has a sub-array called component.
      if ($type === 'css') {
        if (isset($libraries[$library_name][$type]['component'])) {
          $local_library = $libraries[$library_name][$type]['component'];
        }
        else {
          return FALSE;
        }
      }
      else {
        // Local js library.
        $local_library = $libraries[$library_name][$type];
      }
      foreach ($local_library as $key => $value) {
        if (!file_exists(DRUPAL_ROOT . $key) || $replace_local) {
          // The js file doesn't exist.
          // Replace it with remote cdn.
          $library_array[$libraries[$library_name]['cdn']] = $value;
          $updated = TRUE;
        }
        else {
          $library_array[$key] = $value;
        }
      }
    }
  }
  
  return empty($updated) ? FALSE : $library_array;
}

/**
 * Implements hook_views_post_build()
 */
function fullcalendar_view_enhanced_views_post_build(ViewExecutable $view) {
  if ($view->style_plugin instanceof FullCalendarDisplay && \Drupal::routeMatch()->getRouteName() != 'fullcalendar_view_enhanced.event_source') {
    // No need to fetch event contents unless the Fullcalendar views being executed over Ajax as event source.
    // In fact, we don't need to fetch any content at all here.
    // But setting 0 will cause to load all items, 1 is the minimum value possible.
    $view->query->setLimit(1);
  }
}
